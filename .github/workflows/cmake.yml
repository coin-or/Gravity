name: CMake Build Matrix

on: [push]

env:
  BUILD_TYPE: Debug

jobs:

  build-linux:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install LAPACK/BLAS (Linux)  
      run: |
        set -euxo pipefail
        sudo apt-get update
        # Try common runtime packages first (Jammy and older)
        sudo apt-get install -y liblapack3 libblas3 || true
        # Fallback for newer Ubuntu (e.g., Noble) where the runtime package name differs
        sudo apt-get install -y liblapack0 || true
        # As a last resort, install the -devs (often pull in the correct runtime + soname symlinks)
        sudo apt-get install -y liblapack-dev libblas-dev || true
  
        # Make sure the dynamic linker can see it
        sudo ldconfig
        # Debug: show what the loader sees
        ldconfig -p | grep -E 'liblapack\.so(\.3)?' || true
        ldconfig -p | grep -E 'libblas\.so' || true

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DDebug=ON -DCov=ON 

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE --output-on-failure
      
    - name: Codecov
      uses: codecov/codecov-action@v2.1.0
      with:
        verbose: true
