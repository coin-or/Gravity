set(GUROBI_ROOT_DIR "$ENV{GUROBI_ROOT_DIR}" CACHE PATH "Gurobi root directory.")
set(GUROBI_DIR "$ENV{GUROBI_ROOT_DIR}" CACHE PATH "Gurobi root directory.")
set(GUROBI_VERSION "120")
message("Gurobi root" ${GUROBI_ROOT_DIR})
message("Gurobi version ${GUROBI_VERSION}")
message("Looking for Gurobi in ${GUROBI_DIR}")

string(SUBSTRING ${GUROBI_VERSION} 0 3 GUROBI_VERSION_SHORT)	

message("Gurobi version short ${GUROBI_VERSION_SHORT}")

find_path(GUROBI_INCLUDE_DIR gurobi_c++.h HINTS "${GUROBI_DIR}/include")
if(APPLE)
find_library(GUROBI_LIBRARY libgurobi${GUROBI_VERSION_SHORT}.dylib HINTS ${GUROBI_DIR}/lib/macos_universal2)
find_library(GUROBI_CPP_LIBRARY libgurobi_c++.a HINTS "${GUROBI_DIR}/lib/macos_universal2")
elseif(UNIX)
find_library(GUROBI_LIBRARY libgurobi${GUROBI_VERSION_SHORT}.so HINTS ${GUROBI_DIR}/lib/linux64)
find_library(GUROBI_CPP_LIBRARY libgurobi_c++.a HINTS "${GUROBI_DIR}/lib/linux64")
endif()
message("GUROBI_CPP_LIBRARY ${GUROBI_CPP_LIBRARY}")
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(GUROBI DEFAULT_MSG GUROBI_LIBRARY GUROBI_CPP_LIBRARY GUROBI_INCLUDE_DIR)

if(GUROBI_FOUND)
    set(GUROBI_INCLUDE_DIRS ${GUROBI_INCLUDE_DIR})
    set(GUROBI_LIBRARIES ${GUROBI_CPP_LIBRARY} ${GUROBI_LIBRARY})
    message("CMAKE_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}")
#if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
 #       set(GUROBI_LIBRARIES "${GUROBI_LIBRARIES};m;pthread")
  #  endif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
endif(GUROBI_FOUND)

mark_as_advanced(GUROBI_LIBRARY GUROBI_CPP_LIBRARY GUROBI_INCLUDE_DIR)
